2.1.	Назначение программного средства
Сейчас актуально создание такова сервиса в Беларуси. Приводить цифры скока можно заработать или нет? 
Возможные перспективы развития: Добавить расылку смс, добавить акции распродажи, статистика, обширное поле для маркетолога. Все это завязыно на кнопку «Заказать» которой у конкурентов нету. 
Основная задача для клиентов: поиск услуги с возможностью обсудить посмотреть че как. Для компаний: рекламная площадка + обратная связь с клиентами. РАСПИСАТЬ.


2.2.	Требования к программному средству



Такова рода сервисы расчитаны на большое количество пользователей (тысячи компаний, миллионы пользователей) из этого Основные требования : масштабируемость, возможность установки в облако(Windows Azure, Amazon EC2, RackSpace), удобный понятный интерфейс – Расписать.

2.3.	Требования к пользовательскому интерфейсу




Сервис рассчитан на большое количество пользователей, поэтому должен быть хороший интерфейс - РАСПИСАТЬ.
Использую «Twitter Bootstrap» крутой фреймворк для построения UI, РАСПИСАТЬ. 
Возможно про javascript  фреймворки и Rich Internet Application(RIA) ? хотя не использую.








CQRS(использую), EventSourcing(использую), MapReduce(не использую) – Расписать в общем подходы + красивые картинки. 
Плюсы: линейная маштобируемость, простота. 
Минусы: дублирование данных, еваншели консистенс(данные находятся не всегда в правельном состоянии), конкуронси – данные могут переписывать друг друга(в последнем шарю плоха, стоит ли расписывать?)
РАСПИСАТЬ.

SimpleCQRS фраймворк для облегчения EventSourcing, позволяет использовать разные хранилища(sql, mongo, Azure Web Store), упрощает код позволяет проще интегрироваться с облачными хостингами (подерживает: NServiceBus ReonoServiceBus) - РАСПИСАТЬ.


Расписать что будет 2 хранилеща(read/write), написать что за щет использования SimpleCQRS можно использовать любое хранилище для евентов. Для реда возможно буду использовать sql еще не определился. Показать структура врайта – одна таблица с евантами. Показать структуру реада – описать что следуя евен сорсингу данные денормалезованны и дыблируются зато нету джойнов. РАСПИСАТЬ. ЭТО ОСТАВИТЬ ТУТ ИЛИ В РАЗРАБОТКУ? СТОИТ ЛИ ПОКАЗЫВАТЬ СТРУКТУРУ РЕАДА, сейчас нету некакоа смысло использовать то что я использую?



Использовать не буду, обычно используется при хранении пароля пользователя в базе.
Полный бред, зато +2 стр. Оставить?  













Требования  к  программному средству:
	Залогом успеха любого интернет сервиса является большое число пользователей. Исходя из этого - основными требованиями является: масштабируемость и расширяемость. Интернет сервис должен выдерживать большое количество запросов, хранить большие объёмы данных и быть способным распределять нагрузку на несколько серверов.
Разрабатываемое программное средство должно представлять собой Web-приложение, которое подразумевается использовать по локальной сети.
Одной из необходимых задач разработки является создание возможности администрирования системы.
Разрабатываемое программное приложение будет иметь следующие основные средства защиты:
	защита от ввода ключевых выражений и символов, используемых для работы с базами данных (метод инъекции SQL);
	разграничение уровней доступа к данным и функциям;
	шифрование регистрационных данных.
Инъекция SQL (Structured Query Language — язык структурированных запросов) - один из распространённых способов взлома программ, работающих с базами данных. Атака типа инъекции SQL может случиться из-за некорректной обработки входящих данных, используемых в SQL-запросах. Инъекция SQL часто даёт возможность атакующему сайт хакеру выполнить произвольный запрос к базе данных, например, прочитать содержимое любых таблиц или удалить все данные. К основным выражениям, используемым в методе инъекции SQL, относятся: DROP, SELECT, DELETE, UPDATE.
Система создания учетных записей пользователей должна быть доступна только администратору приложения.
Регистрационные данные являются конфиденциальными, они должны храниться в зашифрованном виде без обратного восстановления, а именно в бинарном виде.
Разрабатываемое приложение должно реализовывать все типы выше перечисленных средств защиты, что обеспечит удобную и корректную работу, как отдельных страниц, так и всего программного средства в целом.
Ввиду того, что приложения, используемые для просмотра сайтов (интернет-браузеры), имеют специфическое меню для работы с отображаемыми страницами, должна быть создана навигация по сайту, расположенная на каждой странице. С ее помощью можно будет посетить любой раздел сайта. Навигация должна быть динамически изменяемой, то есть, должна быть возможность редактировать пункты меню без изменения исходного кода приложения, посредством административной панели управления сайтом.
Разрабатываемое приложение должно иметь понятный и удобный в использовании интерфейс, чтобы взаимодействие между программой и пользователем было максимально упрощено. Для того чтобы интерфейс был понятен пользователю, необходимо оформить диалог приложения с пользователем, обладающий кнопочным меню, позволяющим перемещаться по записям, выполнять функцию поиска.
Для удобства пользователя в системе должна быть создана система справочников по данным, носящих условно константный характер, которые предназначены для упрощения вноса данных в систему.
В создаваемом приложении должна быть своя справочная система, в которой будут предусмотрены всевозможные способы работы c системой. Она должна содержать ответы на вопросы, которые могут возникнуть у пользователей, работающих с этой базой. Так же справочная подсистема будет легкой в использовании и эксплуатации. Для удобного перемещения по экранным формам программного средства должно присутствовать меню, которое давало бы возможность быстрого достижения пользователем поставленной цели.
При разработке страниц приложения необходимо соблюдать определённые требования: страницы приложения должны иметь стандартные элементы управления данными, понятные простому пользователю.
Для реализации проекта будет применена табличная форма верстки. Она представляет собой разбиение областей сайта при помощи таблиц. Это позволяет правильно расположить компоненты сайта и предотвращает нарушение его целостности.
Меню приложения будет содержать набор действий, предоставляющих пользователю доступ к основным фукциям приложения. Названия пунктов меню будут отображать закрепленные функции приложения.
Доступ к структуре базы данных должен быть ограничен для неопытных пользователей в целях сохранения структуры базы данных.



CQRS(Command and Query Responsibility Segregation) принцеп  заключается в следующем: любой метод в приложении является либо запросом (Query), возвращающим данные, либо командой (Command), изменяющей данные.
На основе этого принцепа можно реализовать архитектуру приведенную на рисунке.
Данные приложения хронятся в двух местах(простейши вариант 2 похожии таблицы) сами данные и предстовления этих данных, клиент посылает запросы к придстовлению. При этом придстовление хранит данные в денормалезированном виде (так как их проще считывать) это упрощает архитектуру клиента и базы данных(не нужно делать сложные джо1йны расчитывать поля на лету). Поскольку данные нужные для работы и данные нужные для предстовление хронятся в разных местах это исключает возможность блокировки и позволяет лучше маштобировать систему.
    В CQRS часто применяется events sourcing. Суть подхода заключается в хранении не самих данный обекта а хранении всех изминений проишедших с обектом в виде последовательности событий (event stream, event storage) . Часто для предстовления сложного обекта нужно 10-15 таблиц со сложными связями. При использование event sourcing можно обект придставить в виде потока событий(простых обектов там будет ид дата и данные для события) и хранить в одной таблице в сериализованном виде. Так же при этом божно использовать ключ значения хранилещи(например Radis). что очень сильно увеличет производительность запеси.
    Процес перевода событий в реад модель называется регинерацией. Процес регинерации можно делать асинхроннно и расприделенно например с помощу алгоритма map reduce. делать это отложенно и паролельно. Это сильно снизит задержку и позволит горизонтально маштобировать систему.



cqrs, event sorcing

xunit
jasmin
git
asp.net mvc 4 
C#



бла бла бла





1 Анализ литературы по теме дипломного проекта 
	1.1.	Обзор существующих программных средств
	1.2	Назначение программного средства
	1.3	Требования к программному средству
2 Модели положенные в основу разработки программного средства
	2.1	Архитектура CQRS
	2.2	Domain Model 
	2.3	Event Sourcing
	2.4	IoC
	2.5	Метод шифрования положенный в основу разработки обеспечения безопасности доступа к данным
3 Разработка структуры программного средства
	3.1 	Обоснование выбора языков, сред и инструментов разработки проекта 	
	3.2	Требования к пользовательскому интерфейсу		
4 Техническое проектирование программного средства
	4.1	Разработка спецификации требований к программному средству 
	4.3	Разработка информационной модели
	4.4	Разработка схемы алгоритма ... 
	4.5	Разработка схемы алгоритма ... 
	4.6	Разработка схемы алгоритма ...  
5 Тестирование программного средства
6 Методика работы с программным средством
	прочитать подправить готово 
7 Технико-экономическое обоснование
	7.1 РАСЧЕТ ПОКАЗАТЕЛЕЙ ЭКОНОМИЧЕСКОЙ ЭФФЕКТИВНОСТИ ПРИМЕНЕНИЯ РАЗРАБОТКИ ПРОИЗВОДСТВА ПРОГРАММНОГО СРЕДСТВА БРОНИРОВАНИЯ И ЗАКАЗА УСЛУГ
8 Охрана труда
	8.1 Организация охраны труда на предприятии малого бизнеса 
Заключение
	скопипастить
Приложение А Исходный код программного средства
	скопипастить
Приложение Б Исходный код сценариев тестирования
	????
Приложение В Схема алгоритма создания компании
	??????
Приложение Г Схема алгоритма отображения страницы компании
	??????
Приложение Д 
	??????
Приложение Ж Основные экранные формы программного средства
	скопипастить из мануала
Приложение И Структура программного средства
	переделать схему event sourcinga
Приложение К Модель данных программного средства
	нарисовать схему 2 база данных
	
